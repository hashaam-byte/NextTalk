generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== ENUMS =====
enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}

enum UserStatus {
  ONLINE
  OFFLINE
  AWAY
  BUSY
}

enum GroupRole {
  ADMIN
  MODERATOR
  MEMBER
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum PrivacyLevel {
  PUBLIC
  FRIENDS
  PRIVATE
}

// ===== MODELS =====

model User {
  id                    String           @id @default(cuid())
  name                  String?
  email                 String           @unique
  password              String
  phone                 String?
  profileImage          String?
  bio                   String?
  status                String           @default("offline")
  lastSeen              DateTime?
  lastActive            DateTime         @default(now())
  isTyping              Boolean          @default(false)
  typingInChat          String?
  deviceId              String?
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  messages              Message[]        @relation("UserMessages")
  participants          Participant[]
  receivedNotifications Notification[]   @relation("UserNotifications")
  sentNotifications     Notification[]   @relation("SentNotifications")
  fromNotifications     Notification[]   @relation("FromUserNotifications")
  contacts              User[]           @relation("UserContacts")
  contactOf             User[]           @relation("UserContacts")
  sentRequests          ContactRequest[] @relation("SentRequests")
  receivedRequests      ContactRequest[] @relation("ReceivedRequests")
  theme                 String           @default("dark")
  language              String           @default("en")
  notifications         Boolean          @default(true)
  soundEnabled          Boolean          @default(true)
  privacyLevel          String           @default("friends")
  readReceipts          Boolean          @default(true)
  groups                GroupMember[]
  ownedGroups           Group[]          @relation("GroupOwner")
  groupMessages         GroupMessage[]
  settings              UserSettings?
  devices               Device[]         // Added for multi-device tracking

  @@index([status])
  @@index([lastSeen])
}

model Chat {
  id               String        @id @default(cuid())
  name             String?
  isGroup          Boolean       @default(false)
  avatar           String?
  lastActivity     DateTime      @default(now())
  activeUsers      String[]      @default([])
  typingUsers      String[]      @default([])
  sharedMediaUrls  String[]      @default([])  // New
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  messages         Message[]     @relation("ChatMessages")
  participants     Participant[]
}

model Message {
  id         String    @id @default(cuid())
  content    String
  mediaUrl   String?
  mediaType  MediaType?  // New
  createdAt  DateTime  @default(now())
  senderId   String
  chatId     String
  isRead     Boolean   @default(false)
  status     String    @default("sent")
  timestamp  DateTime  @default(now())
  deleted    Boolean   @default(false)  // Soft delete
  sender     User      @relation("UserMessages", fields: [senderId], references: [id], onDelete: Cascade)
  chat       Chat      @relation("ChatMessages", fields: [chatId], references: [id], onDelete: Cascade)

  @@index([senderId])
  @@index([chatId])
}

model Participant {
  id       String   @id @default(cuid())
  userId   String
  chatId   String
  joinedAt DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat     Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@unique([userId, chatId])
}

model Notification {
  id         String   @id @default(cuid())
  type       String
  content    String
  userId     String
  senderId   String
  fromUserId String?
  groupId    String?
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())

  user     User    @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  sender   User    @relation("SentNotifications", fields: [senderId], references: [id], onDelete: Cascade)
  fromUser User?   @relation("FromUserNotifications", fields: [fromUserId], references: [id], onDelete: Cascade)
  group    Group?  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([senderId])
  @@index([fromUserId])
  @@index([groupId])
}

model ContactRequest {
  id          String   @id @default(cuid())
  senderId    String
  recipientId String
  status      String   @default("PENDING")
  createdAt   DateTime @default(now())
  sender      User     @relation("SentRequests", fields: [senderId], references: [id])
  recipient   User     @relation("ReceivedRequests", fields: [recipientId], references: [id])

  @@unique([senderId, recipientId])
}

model Group {
  id           String         @id @default(cuid())
  name         String
  description  String?
  avatar       String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  createdBy    String
  owner        User           @relation("GroupOwner", fields: [createdBy], references: [id])
  members      GroupMember[]
  messages     GroupMessage[]
  isPublic     Boolean        @default(false)
  Notification Notification[]

  @@index([createdBy])
}

model GroupMember {
  id       String   @id @default(cuid())
  groupId  String
  userId   String
  role     String   @default("MEMBER")
  joinedAt DateTime @default(now())
  group    Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
  @@index([groupId])
  @@index([userId])
}

model GroupMessage {
  id         String     @id @default(cuid())
  content    String
  groupId    String
  senderId   String
  mediaUrl   String?     // New
  mediaType  MediaType?  // New
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  group      Group      @relation(fields: [groupId], references: [id], onDelete: Cascade)
  sender     User       @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([groupId])
  @@index([senderId])
}

model UserSettings {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  theme         String   @default("dark")
  language      String   @default("en")
  notifications Boolean  @default(true)
  soundEnabled  Boolean  @default(true)
  onlineStatus  Boolean  @default(true)
  readReceipts  Boolean  @default(true)
  privacyLevel  String   @default("friends")
  messageSounds String   @default("default")
  callRingtone  String   @default("default")
  lastUpdated   DateTime @updatedAt

  @@index([userId])
}

model Device {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  deviceId  String
  platform  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}
