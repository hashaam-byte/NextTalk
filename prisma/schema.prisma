generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String            @id @default(cuid())
  name                  String?
  email                 String            @unique
  password              String
  phone                 String?
  profileImage          String? // Changed from profileImage to profileImage
  bio                   String?
  status                String            @default("offline") // "online", "offline", "away", "busy"
  lastSeen              DateTime?
  lastActive            DateTime?         @default(now()) // Last activity timestamp
  isTyping              Boolean           @default(false) // Typing status
  typingInChat          String? // ChatId where user is typing
  deviceId              String? // For handling multiple device sessions
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  messages              Message[]         @relation("UserMessages")
  participants          Participant[]
  receivedNotifications Notification[]    @relation("UserNotifications")
  sentNotifications     Notification[]    @relation("SentNotifications")
  contacts              User[]            @relation("UserContacts")
  contactOf             User[]            @relation("UserContacts")
  sentRequests          ContactRequest[]  @relation("SentRequests")
  receivedRequests      ContactRequest[]  @relation("ReceivedRequests")
  theme                 String            @default("dark")
  language              String            @default("en")
  notifications         Boolean           @default(true)
  soundEnabled          Boolean           @default(true)
  privacyLevel          String            @default("friends") // "public", "friends", "private"
  readReceipts          Boolean           @default(true)
  groups                GroupMember[]
  ownedGroups           Group[]           @relation("GroupOwner")
  groupMessages         GroupMessage[]
  settings              UserSettings?
  outgoingCalls         Call[]            @relation("UserOutgoingCalls")
  incomingCalls         Call[]            @relation("UserIncomingCalls")
  callParticipations    CallParticipant[]
  callMessages          CallMessage[]
  callMetrics           CallMetric[]
  posts                 Post[]
  likes                 Like[]
  comments              Comment[]
  media                 UserMedia[]
  followedTopics        Topic[]           @relation("TopicFollowers")
  topicPosts            TopicPost[]
  selectedApps          String[]          @default([]) // Add this field for storing selected app IDs
  userApps              UserApp[]        // Add this line to create the opposite relation
}

model Chat {
  id           String        @id @default(cuid())
  name         String?
  isGroup      Boolean       @default(false)
  avatar       String?
  lastActivity DateTime      @default(now()) // Track last chat activity
  activeUsers  String[]      @default([]) // Array of active user IDs in chat
  typingUsers  String[]      @default([]) // Array of currently typing user IDs
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  messages     Message[]     @relation("ChatMessages")
  participants Participant[]

  calls Call[]
}

model Message {
  id        String   @id @default(cuid())
  content   String
  mediaUrl  String?
  createdAt DateTime @default(now())
  senderId  String
  chatId    String
  isRead    Boolean  @default(false)
  status    String   @default("sent") // 'sent', 'delivered', 'read'
  timestamp DateTime @default(now()) // Add this field
  sender    User     @relation("UserMessages", fields: [senderId], references: [id], onDelete: Cascade)
  chat      Chat     @relation("ChatMessages", fields: [chatId], references: [id], onDelete: Cascade)

  @@index([senderId])
  @@index([chatId])
}

model Participant {
  id       String   @id @default(cuid())
  userId   String
  chatId   String
  joinedAt DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat     Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  wallpaper String? // Add this field

  @@unique([userId, chatId])
}

model Notification {
  id        String   @id @default(cuid())
  type      String
  content   String
  userId    String
  chatId    String?   // Add this field
  senderId  String? // Changed from fromUserId to senderId to match the model
  groupId   String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  sender User?  @relation("SentNotifications", fields: [senderId], references: [id], onDelete: SetNull)
  group  Group? @relation("GroupNotifications", fields: [groupId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([senderId])
  @@index([groupId])
}

model ContactRequest {
  id          String   @id @default(cuid())
  senderId    String
  recipientId String
  status      String   @default("PENDING") // PENDING, ACCEPTED, REJECTED
  createdAt   DateTime @default(now())
  sender      User     @relation("SentRequests", fields: [senderId], references: [id])
  recipient   User     @relation("ReceivedRequests", fields: [recipientId], references: [id])

  @@unique([senderId, recipientId])
}

model Group {
  id            String         @id @default(cuid())
  name          String
  description   String?
  bio           String? // Add this field
  avatar        String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  createdBy     String
  owner         User           @relation("GroupOwner", fields: [createdBy], references: [id])
  members       GroupMember[]
  messages      GroupMessage[]
  notifications Notification[] @relation("GroupNotifications")
  isPublic      Boolean        @default(false)

  @@index([createdBy])
}

model GroupMember {
  id       String   @id @default(cuid())
  groupId  String
  userId   String
  role     String   @default("MEMBER")
  joinedAt DateTime @default(now())
  group    Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
  @@index([groupId])
  @@index([userId])
}

model GroupMessage {
  id        String   @id @default(cuid())
  content   String
  groupId   String
  senderId  String
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([groupId])
  @@index([senderId])
}

model UserSettings {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  theme         String   @default("dark")
  language      String   @default("en")
  notifications Boolean  @default(true)
  soundEnabled  Boolean  @default(true)
  onlineStatus  Boolean  @default(true)
  readReceipts  Boolean  @default(true)
  privacyLevel  String   @default("friends")
  messageSounds String   @default("default")
  callRingtone  String   @default("default")
  lastUpdated   DateTime @updatedAt

  @@index([userId])
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}

enum CallStatus {
  RINGING
  ONGOING
  ENDED
  MISSED
  REJECTED
}

enum CallType {
  AUDIO
  VIDEO
}

enum Visibility {
  PUBLIC
  CONTACTS
  PRIVATE
}

model Call {
  id           String    @id @default(cuid())
  type         String // 'audio' or 'video'
  status       String // 'initiated', 'ringing', 'ongoing', 'ended', 'missed', 'declined'
  startTime    DateTime  @default(now())
  endTime      DateTime?
  duration     Int? // in seconds
  quality      Int? // call quality score 1-5
  streamCallId String? // Stream service call identifier
  streamToken  String? // Stream service token
  recording    Boolean   @default(false)
  recordingUrl String?
  screenshare  Boolean   @default(false)

  callerId   String
  caller     User   @relation("UserOutgoingCalls", fields: [callerId], references: [id], onDelete: Cascade)
  receiverId String
  receiver   User   @relation("UserIncomingCalls", fields: [receiverId], references: [id], onDelete: Cascade)

  chatId String
  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)

  participants CallParticipant[]
  messages     CallMessage[]
  metrics      CallMetric[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chatId])
  @@index([callerId])
  @@index([receiverId])
  @@index([status])
  @@index([type])
}

model CallParticipant {
  id             String    @id @default(cuid())
  callId         String
  userId         String
  joinTime       DateTime  @default(now())
  leaveTime      DateTime?
  duration       Int? // time spent in call (seconds)
  audio          Boolean   @default(true)
  video          Boolean   @default(false)
  screenshare    Boolean   @default(false)
  networkQuality Int? // 1-5 rating
  call           Call      @relation(fields: [callId], references: [id], onDelete: Cascade)
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([callId])
  @@index([userId])
}

model CallMessage {
  id        String   @id @default(cuid())
  callId    String
  userId    String
  content   String
  type      String // 'chat', 'system', 'reaction'
  createdAt DateTime @default(now())
  call      Call     @relation(fields: [callId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([callId])
  @@index([userId])
}

model CallMetric {
  id        String   @id @default(cuid())
  callId    String
  userId    String
  type      String // 'quality', 'latency', 'bandwidth', 'error'
  value     String // JSON string containing metric data
  timestamp DateTime @default(now())
  call      Call     @relation(fields: [callId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([callId])
  @@index([userId])
  @@index([type])
  @@index([timestamp])
}

model Topic {
  id          String       @id @default(cuid())
  name        String       @unique
  slug        String       @unique
  description String?
  icon        String?
  color       String?
  posts       TopicPost[]
  followers   User[]       @relation("TopicFollowers")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model TopicPost {
  id        String    @id @default(cuid())
  title     String?
  content   String
  mediaUrl  String?
  topicId   String
  authorId  String
  topic     Topic     @relation(fields: [topicId], references: [id], onDelete: Cascade)
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likes     Like[]    @relation("PostLikes")
  comments  Comment[] @relation("PostComments")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([topicId])
  @@index([authorId])
}

model Post {
  id          String     @id @default(cuid())
  content     String
  mediaUrl    String?
  userId      String
  visibility  Visibility @default(PUBLIC)
  viewersIds  String[]   @default([])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes       Like[]
  comments    Comment[]

  @@index([userId])
  @@index([visibility])
}

model Like {
  id          String     @id @default(cuid())
  userId      String
  postId      String
  createdAt   DateTime   @default(now())
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  post        Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
  topicPost   TopicPost? @relation("PostLikes", fields: [topicPostId], references: [id])
  topicPostId String?

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

model Comment {
  id          String     @id @default(cuid())
  content     String
  userId      String
  postId      String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  post        Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
  topicPost   TopicPost? @relation("PostComments", fields: [topicPostId], references: [id])
  topicPostId String?

  @@index([userId])
  @@index([postId])
}

model UserMedia {
  id        String   @id @default(cuid())
  userId    String
  url       String
  type      String
  fileType  String
  useCount  Int      @default(0)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
}

model UserApp {
  id          String   @id @default(cuid())
  userId      String
  appId       String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, appId])
  @@index([userId])
}
